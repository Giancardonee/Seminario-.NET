La clase StringBuilder representa una cadena mutable de caracteres.
 A diferencia del tipo String, el cual es un tipo inmutable, es decir,
que cada operación que se quiera modificar el la variable String en realidad crea una nueva cadena  
un objeto StringBuilder permite mutar el contenido de la cadena original una vez que se ha creado 
una instancia de la clase, este se puede modificar agregando, quitando, reemplazando o insertando caracteres.
Aunque la clase StringBuilder generalmente ofrece un mejor rendimiento que la clase String , 
no debe reemplazar automáticamente String con StringBuilder siempre que desee manipular cadenas. 

El rendimiento depende del tamaño de la cadena, la cantidad de memoria que se asignará a la nueva cadena,
 el sistema en el que se ejecuta la aplicación y el tipo de operación. 

En que momento debo usar String:

Cuando la cantidad de cambios que su aplicación realizará en una cadena es pequeña.
Cuando está realizando un número fijo de operaciones de concatenación, particularmente con cadenas literales.
Cuando tiene que realizar operaciones de búsqueda extensas mientras está construyendo su cadena. 


En que momento usar StringBuilder:
Cuando se quiera modificar el contenido del string a traves de sus indices.
Cuando espera que su aplicación realice una cantidad significativa de cambios en una cadena.

Ejemplo en code: 
        string pruebaStr = "Numeros: "; 
        for (int i = 0; i < 10000 ; i++){
            pruebaStr += i.ToString()+""; 
        }


        StringBuilder pruebaSB =  new StringBuilder("Numeros: "); 
        for (int i = 0; i < 10000; i++ ){
            pruebaSB.Append(i.ToString());
        }
        
en este caso, como se trabaja varias veces modificando la cadena, es mas eficiente y apropiado usar un StringBuilder. 
En los tiempos de ejecucion nos damos cuenta cuanto tarda en ejecutarse cada uno, ademas del uso de memoria que conlleva 
realizar cada operacion en estos tipos de datos. 
